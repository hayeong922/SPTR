[DEFAULT]
#part-of-speech(pos) sequence pattern for filtering term candidate lexical units
pos_sequence_filter=../config/pos_sequence_filter3

#stop words list for filtering term candidates
stopwords=../config/stoplist.txt

# Maximum number of words allowed in a multi-word term. Default value is 6
# must also be compatible with ngram size range for solr.ShingleFilterFactory in solr schema.xml
max_tokens=5
# Minimum number of words allowed in a multi-word term. Default value is 1
# must also set gram size range for solr.ShingleFilterFactory in solr schema.xml
min_tokens=1

#Minimum number of characters allowed in any term candidates units. Default value is -1 (unlimited)
#setting this value to overcome the erroneous PoS tagging or text processing in irregular text
#TODO: support later
max_char_length=-1

#Minimum number of characters allowed in any term candidates units. Default value is 2
#increase for better precision
#TODO: what is the filtering strategy?
min_char_length=1

#Minimum frequency allowed for term candidates. Default value is 2
#increase for better precision
min_term_freq=2

# Maximum number of processes (for annotation and dictionary tagging) that can run at the same time.
PARALLEL_WORKERS=6

# cut-off threshold (exclusive) for term recognition
cut_off_threshold=0

# similarity threshold (term variations/synonyms identification)
# TODO: implement and evaluate later
sim_threshold=0.95

# Index core
solr_core_url=http://localhost:8983/solr/tatasteel
# solr_core_url=http://oakanalysis.shef.ac.uk:8983/solr/tatasteel

# solr content field from where terminology and frequency information will be queried and analysed
# Terminology Recognition aware NLP pipeline must be configured for this field.
# Recommended configuration for this field type (indexing analyser) is consisted of solr.StandardTokenizerFactory -> solr.LowerCaseFilterFactory -> solr.ASCIIFoldingFilterFactory -> solr.EnglishMinimalStemFilterFactory -> solr.ShingleFilterFactory 
# An example configuration is in schema.xml
solr_field_content=content

#solr document unique identifier field, default to 'id'
solr_field_doc_id=id

# The solr terminology normalisation analyser (solr_term_normaliser) is used to normalise terms before querying frequency information via Solr ttf functionQuery 
# Recommended configuration for this analyser is consisted of solr.StandardTokenizerFactory -> solr.LowerCaseFilterFactory -> solr.ASCIIFoldingFilterFactory -> solr.EnglishMinimalStemFilterFactory
# "Field Analysis Request Handler" must also be enabled
# An example configuration is in schema.xml and solrconfig.xml
solr_term_normaliser=industry_term_normaliser

# solr field where term candidates will be stored and indexed
# THIS MUST ALSO BE CONFIGURED IN SOLR SCHEMA FOR MULTIVALUED FIELD INDEXED AND STORED WITH TERM VECTOR ENABLED
# "schema.xml" provides an example with a dynamic field "*_tvss"
solr_field_term_candidates=term_candidates_tvss

# solr field where final filtered terms will be stored and indexed
# THIS MUST ALSO BE CONFIGURED IN SOLR SCHEMA FOR "industry_term_type" FIELD TYPE
# "industry_term_type" should be configured for general term variation normalisation 
# (Recommended setting: solr.KeywordTokenizerFactory -> solr.PatternReplaceCharFilterFactory ('-' -> ' ') -> solr.LowerCaseFilterFactory -> solr.ASCIIFoldingFilterFactory -> solr.EnglishMinimalStemFilterFactory)
# "industryTerm" field in "schema.xml" provides an example.
solr_field_industry_term=industryTerm

#disabling this setting will only executing ranking for candidates and indexing filtered candidates
# options: true|false
tagging=true

#exporting (all) term candidates can help to evaluate and choose a suitable cut-off threshold
#the export file name default as solr core name + 'term_candidates' (CSV format by default)
# options: true|false
export_term_candidates=true

# exporting term (filtered terms) variants (CSV format by default)
# options: true|false
export_term_variants=true
term_variants_export_file_name=term_variants

[DICTIONARY_TAGGER]
# disabling this setting will not perform dictionary tagging
# options: true|false
dict_tagging=false

# SPTR provides a way to associate terminologies from a dictionary to text
# One term dictionary file is supported to tag the indexed documents
# dictionary file must be in csv format with two columns (term surface form and descriptions). 
# MUST NOT INCLUDE HEADDING IN FIRST ROW.
dictionary_file=../config/Steel-Terminology-Tata-Steel.csv

# Disable this will perform exact matching
# Exact matching is based on normalised term forms (see solr_term_normaliser above)
# The dictionary tagger is enabled with term recognition methods by default which can recognise term variants (e.g., case insensitive, accent folding, etc.).
# Fuzzy matching is to find dictionary terms that match the pattern approximately with the cost of extra computation.
# Fuzzy matching here is based on normalised Levenshtein Distance. Enable this can help to recognise misspelling and the linking of similar terms.
dict_tagger_fuzzy_matching=false

#similarity threshold (range: [0-1]) for fuzzy matching
dict_tagger_sim_threshold=0.86

#The Solr field to where the dictionary matched terms will be indexed
#SHOULD BE DIFFERENT FROM THE "solr_field_industry_term" FIELD
solr_field_dictionary_term=dictTerm_ss

# dictionary term can indexed either separately (different solr field) or with solr_field_industry_term
# enabling this option to index dictionary terms with industry term
# options: true|false
index_dict_term_with_industry_term=true
